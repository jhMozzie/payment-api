generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int        @id @default(autoincrement())
  name          String
  email         String     @unique
  password_hash String
  role          UserRole
  created_at    DateTime   @default(now())
  collector     Collector?
}

model Customer {
  id         Int       @id @default(autoincrement())
  name       String
  tax_id     String    @unique
  address    String
  created_at DateTime  @default(now())
  invoices   Invoice[]
}

model Collector {
  id           Int           @id @default(autoincrement())
  firstname    String
  lastname     String
  phone        String?       @unique
  user_id      Int?          @unique
  bankAccounts BankAccount[]
  user         User?         @relation(fields: [user_id], references: [id])
  invoices     Invoice[]
  payments     Payment[]
}

model BankAccount {
  id             Int       @id @default(autoincrement())
  collector_id   Int
  bank_name      String
  account_number String    @unique  
  cci            String    @unique
  is_primary     Boolean?  @default(false)
  collector      Collector @relation(fields: [collector_id], references: [id])

  @@index([collector_id])
}

model Invoice {
  id              Int             @id @default(autoincrement())
  customer_id     Int
  collector_id    Int
  issue_date      DateTime
  total           Decimal
  comments        String?
  payment_method  PaymentMethod
  payment_channel PaymentChannel
  status          InvoiceStatus

  collector       Collector       @relation(fields: [collector_id], references: [id])
  customer        Customer        @relation(fields: [customer_id], references: [id])
  details         InvoiceDetail[]
  cashMovements   CashMovement[]         // 1:N
  invoicePayments InvoicePayment[]       // ðŸ‘ˆ relaciÃ³n con tabla intermedia
}

model Payment {
  id              Int                   @id @default(autoincrement())
  collector_id    Int
  payment_date    DateTime
  amount          Decimal
  notes           String?
  payment_channel PaymentChannelPayment

  collector       Collector             @relation(fields: [collector_id], references: [id])

  invoicePayments InvoicePayment[]      // ðŸ‘ˆ nueva relaciÃ³n con tabla intermedia
}

model InvoicePayment {
  id         Int     @id @default(autoincrement())
  invoice_id Int
  payment_id Int
  amount     Decimal

  invoice Invoice @relation(fields: [invoice_id], references: [id])
  payment Payment @relation(fields: [payment_id], references: [id])

  @@index([invoice_id])
  @@index([payment_id])
}


enum UserRole {
  admin
  collector
  viewer
}

enum PaymentMethod {
  cash
  credit
}

enum PaymentChannel {
  invoice
  receipt
  sale_note
}

enum InvoiceStatus {
  unpaid
  partial
  paid
}

enum PaymentChannelPayment {
  cash
  bcp
  bbva
  yape
  plin
  undeclared
  interbank
  others
}

model Product {
  id              Int             @id @default(autoincrement())
  name            String
  unit            String
  active          Boolean         @default(true)
  estimated_price Decimal?
  invoiceDetails  InvoiceDetail[] // ðŸ‘ˆ relaciÃ³n uno a muchos
}

model InvoiceDetail {
  id               Int     @id @default(autoincrement())
  invoice_id       Int
  product_id       Int
  product_name     String
  quantity         Decimal
  unit             String
  unit_price       Decimal
  subtotal         Decimal
  igv_amount       Decimal   @default(0.0)
  has_igv_included Boolean

  invoice Invoice @relation(fields: [invoice_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@index([invoice_id])
  @@index([product_id])
}

model CashMovement {
  id              Int                @id @default(autoincrement())
  invoice_id      Int?
  source          CashMovementSource
  movement_date   DateTime
  amount          Decimal
  channel         DeclaredChannel
  description     String
  delivery_method DeliveryMethod?
  delivered_to    String?

  invoice Invoice? @relation(fields: [invoice_id], references: [id])

  @@index([invoice_id])
}

enum CashMovementSource {
  payment
  other
}

enum DeclaredChannel {
  declared
  undeclared
}

enum DeliveryMethod {
  cash
  bank_transfer
}
